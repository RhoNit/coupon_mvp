package main

import (
	"context"
	"log"
	"os"

	_ "github.com/RhoNit/coupon_mvp/docs" // generated by swag init

	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/joho/godotenv"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/redis/go-redis/v9"
	echoSwagger "github.com/swaggo/echo-swagger"
	_ "github.com/swaggo/swag"

	"github.com/RhoNit/coupon_mvp/internal/handler"
	"github.com/RhoNit/coupon_mvp/internal/repository"
	"github.com/RhoNit/coupon_mvp/internal/service"
)

// @title Coupon MVP
// @version 1.0
// @description A Coupon Management System (Farmako assignment)
// @termsOfService http://swagger.io/terms/

// @contact.name Ranit Biswas
// @contact.url http://www.swagger.io/support
// @contact.email ranitbiswas.cs@gmail.com

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /api/v1
// @schemes http https

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.
func main() {
	// load env vars
	if err := godotenv.Load(); err != nil {
		log.Printf("failed loading .env file")
	}

	// echo engine initialization
	e := echo.New()

	// middleware
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())
	e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
		AllowOrigins: []string{os.Getenv("CORS_ALLOWED_ORIGINS")},
		AllowMethods: []string{os.Getenv("CORS_ALLOWED_METHODS")},
		AllowHeaders: []string{os.Getenv("CORS_ALLOWED_HEADERS")},
	}))

	// datbase connection
	dbURL := os.Getenv("DATABASE_URL")
	if dbURL == "" {
		dbURL = "postgres://postgres:postgres@localhost:5432/coupon_db"
	}

	ctx := context.Background()
	pool, err := pgxpool.New(ctx, dbURL)
	if err != nil {
		log.Fatalf("Unable to connect to database: %v", err)
	}
	defer pool.Close()

	// redis connection
	redisURL := os.Getenv("REDIS_URL")
	if redisURL == "" {
		redisURL = "localhost:6379"
	}
	redisClient := redis.NewClient(&redis.Options{
		Addr:     redisURL,
		Password: os.Getenv("REDIS_PASSWORD"),
		DB:       0,
	})

	// initialize repositories and services
	couponRepo := repository.NewCouponRepository(pool)
	couponService := service.NewCouponService(couponRepo, redisClient)
	couponHandler := handler.NewCouponHandler(*couponService)

	// routes
	api := e.Group("/api/v1")

	// swagger
	e.GET("/swagger/*", echoSwagger.WrapHandler)

	// coupon endpoints
	couponGroup := api.Group("/coupons")
	{
		couponGroup.GET("/applicable", couponHandler.GetApplicableCoupons)
		couponGroup.POST("/validate", couponHandler.ValidateCoupon)
		couponGroup.POST("", couponHandler.CreateCoupon)
	}

	// start server
	port := os.Getenv("APP_PORT")
	if port == "" {
		port = "8080"
	}

	e.Logger.Fatal(e.Start(":" + port))
}
